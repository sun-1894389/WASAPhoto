openapi: 3.0.3
info:
  title: WASAPhoto API
  description: |-
    This is the API for WASAPhoto homework 1 by 1894389
  version: 0.1.0
tags:
  - name: "login"
    description: Endpoint for logins
  - name: "search"
    description: Endpoint for search
  - name: "user"
    description: Endpoint that manages users
  - name: "ban"
    description: Endpoint that manages banned users
  - name: "photo"
    description: Endpoint that manages photos
  - name: "comments"
    description: Endpoint that manages comments
  - name: "likes"
    description: Endpoint that manages likes
  - name: "followers"
    description: Endpoint that manages likes
  - name: "stream"
    description: Endpoint that manages stream
    
paths:
  /session:
    post:
      tags: ["login"]
      summary: Logs in the user
      description: |-
        If the user does not exist, it will be created,
        and an identifier is returned.
        If the user exists, the user identifier is returned.
      operationId: doLogin
      requestBody:
        description: User details
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/user_login"
        required: true
      responses:
        '201':
          description: User log-in action successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/login_return"
# --------------------------------------------------------------
  /users:
     get:
      tags: ["search"]
      summary: Finds the profile of an user by his Id
      description: Gets an user profile
      operationId: getUserProfile
      parameters:
      - name: id
        in: query
        description: ID dell'utente che viene cercato
        schema:
          type: string
          pattern: '^.*?$'
          minLength: 3
          maxLength: 16
        example: "Luis64"
      responses:
        '200':
          $ref: "#/components/responses/user_ok"
        '400':
          $ref: "#/components/responses/bad_request"
        '401':
          $ref: "#/components/responses/unauthorized"
        '403':
          $ref: "#/components/responses/forbidden"
        '404':
          $ref: "#/components/responses/not_found"
        '500':
          $ref: "#/components/responses/internal_server_error"
      security:
        - bearerAuth: []
# --------------------------------------------------------------
  /users/{id}:
    parameters: 
        - $ref: "#/components/parameters/identifier"
    get:
      tags: ["user"]
      summary: Retrieves all the info of a profile
      description: Gets every info of an user's profile
      operationId: getProfile
      
      responses:
        '200':
          $ref: "#/components/responses/profile_fetched"
        '206':
          $ref: "#/components/responses/partial_content"
        '401':
          $ref: "#/components/responses/unauthorized"
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: "#/components/responses/not_found"
        '500':
          $ref: "#/components/responses/internal_server_error"
          
      security:
        - bearerAuth: []

    put:
      tags: ["user"]
      summary: Changes the user's nickname
      description: Allows the user to change his nickname
      operationId: setMyUserName
        
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/user_nickname"
            example: 
              nickname: "Jonathan"
        required: true

      responses:
        '204':
          $ref: "#/components/responses/no_content"
        '401':
          $ref: "#/components/responses/unauthorized"
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: "#/components/responses/not_found"
        '500':
          $ref: "#/components/responses/internal_server_error"
          
      security:
        - bearerAuth: [] 
# --------------------------------------------------------------
  /users/{id}/banned_users/{banned_id}:
    parameters:
        - $ref: "#/components/parameters/banned_id"
        - $ref: '#/components/parameters/identifier'
    put:
      tags: ["ban"]
      summary: Bans/block a user
      description: Once a user is blocked he/she won't be able to see any info from whoever banned him/her(photo,comments,likes,ecc...).
      operationId: banUser
      
      responses:
        '204':
          $ref: "#/components/responses/no_content"
        '401':
          $ref: "#/components/responses/unauthorized"
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: "#/components/responses/not_found"
        '500':
          $ref: "#/components/responses/internal_server_error"
          
      security:
        - bearerAuth: [] 
    
    delete:
      tags: ["ban"]
      summary: Unbans/unblocks a user
      description: By removing the ban,the unbanned user can see every information of the persone that unbanned him/her.
      operationId: unbanUser
      
      responses:
        '204':
          $ref: "#/components/responses/no_content"
        '401':
          $ref: "#/components/responses/unauthorized"
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: "#/components/responses/not_found"
        '500':
          $ref: "#/components/responses/internal_server_error"
      
      security:
        - bearerAuth: []
# --------------------------------------------------------------
  /users/{id}/followers/{follower_id}:
    parameters:
        - $ref: "#/components/parameters/follower_id"
        - $ref: '#/components/parameters/identifier'
        
    put:
      tags: ["followers"]
      summary: Follows a specific user
      description: Allows a user to follow another user. 
      operationId: followUser
      
      responses:
        '204':
          $ref: "#/components/responses/no_content"
        '401':
          $ref: "#/components/responses/unauthorized"
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: "#/components/responses/not_found"
        '500':
          $ref: "#/components/responses/internal_server_error"
      
      security:
        - bearerAuth: [] 
          
    delete:
      tags: ["followers"]
      summary: Unfollows a specific user
      description: Unfollow another one,removing him from your list of followed users.
      operationId: unfollowUser
      
      responses:
        '204':
          $ref: "#/components/responses/no_content"
        '401':
          $ref: "#/components/responses/unauthorized"
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: "#/components/responses/not_found"
        '500':
          $ref: "#/components/responses/internal_server_error"      
          
      security:
        - bearerAuth: []
# --------------------------------------------------------------
  /users/{id}/home:
    parameters: 
        - $ref: '#/components/parameters/identifier'
        
    get:
      tags: ["stream"]
      summary: Obtain the stream
      description: Get all the photos from the users
      operationId: getMyStream

      responses:
        '200':
          $ref: "#/components/responses/stream_ok"
        '401':
          $ref: "#/components/responses/unauthorized"
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: "#/components/responses/not_found"
        '500':
          $ref: "#/components/responses/internal_server_error"
          
      security:
        - bearerAuth: [] 
# --------------------------------------------------------------
  /users/{id}/photos:
    parameters: 
        - $ref: '#/components/parameters/identifier'
        
    post:
      tags: ["photo"]
      summary: Upload a photo
      description: A user can upload one or multiple images on his/her profile
      operationId: uploadPhoto
      
      requestBody:
        content:
          image/*:
            schema:
              $ref: "#/components/schemas/image"
            example:
              photo_data: "010110010"
        required: true

      responses:
        '201':
          $ref: "#/components/responses/photo_uploaded"
        '401':
          $ref: "#/components/responses/unauthorized"
        '403':
          $ref: '#/components/responses/forbidden'
        '500':
          $ref: "#/components/responses/internal_server_error"
          
      security:
        - bearerAuth: []
# -------------------------------------------------------------- 
  /users/{id}/photos/{photo_id}:
    parameters: 
        - $ref: '#/components/parameters/identifier'
        - $ref: '#/components/parameters/photo_id'
        
        
    get:
      tags: ["photo"]
      summary: Downloads a photo
      description: A user can access a photo and download it
      operationId: getPhoto
      
      responses:
        '200':
          $ref: "#/components/responses/photo_download"
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: "#/components/responses/not_found"
        '500':
          $ref: "#/components/responses/internal_server_error"
          
      security:
        - bearerAuth: [] 
        
    delete:
      tags: ["photo"]
      summary: Deletes a photo
      description: Deletes a user's photo with relative comments and likes
      operationId: deletePhoto
      
      responses:
        '204':
          $ref: "#/components/responses/no_content"
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: "#/components/responses/not_found"
        '500':
          $ref: "#/components/responses/internal_server_error"
          
      security:
        - bearerAuth: [] 
# --------------------------------------------------------------  
  /users/{id}/photos/{photo_id}/comments:
    parameters: 
        - $ref: '#/components/parameters/identifier'
        - $ref: '#/components/parameters/photo_id'
        
    post:
      tags: ["comments"]
      summary: Add a comment to a photo
      description: Adds a comment to a user's photo.
      operationId: commentPhoto
      
      requestBody:
        description: Contains the id of who's commenting and the relative comment
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/comment'
        required: true
      
      responses:
        '201':
          $ref: '#/components/responses/comment_added'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: "#/components/responses/not_found"
        '500':
          $ref: "#/components/responses/internal_server_error"
          
      security:
        - bearerAuth: [] 
# --------------------------------------------------------------
  /users/{id}/photos/{photo_id}/comments/{comment_id}:
    parameters: 
        - $ref: '#/components/parameters/identifier'
        - $ref: '#/components/parameters/photo_id'
        - $ref: '#/components/parameters/comment_id'
        
    delete:
      tags: ["comments"]
      summary: Remove a comment from a photo
      description: Allows a user to remove a comment from a photo he posted.
      operationId: uncommentPhoto
      
      responses:
        '204':
          $ref: '#/components/responses/no_content'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: "#/components/responses/not_found"
        '500':
          $ref: "#/components/responses/internal_server_error"
          
      security:
        - bearerAuth: []
# --------------------------------------------------------------
  /users/{id}/photos/{photo_id}/likes/{like_id}:
    parameters: 
        - $ref: '#/components/parameters/identifier'
        - $ref: '#/components/parameters/photo_id'
        - $ref: '#/components/parameters/like_id'
  
    put:
      tags: ["likes"]
      summary: Add a like to a photo
      description: Adds a like to a user's photo. A user can only like a photo once.
      operationId: likePhoto
      
      responses:
        '204':
          $ref: '#/components/responses/no_content'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: "#/components/responses/not_found"
        '500':
          $ref: "#/components/responses/internal_server_error"
      
      security:
        - bearerAuth: [] 
    
    delete:
      tags: ["likes"]
      summary: Remove a like from a photo
      description: Removes a like from a user's photo
      operationId: unlikePhoto
      
      responses:
        '204':
          $ref: '#/components/responses/no_content'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: "#/components/responses/not_found"
        '500':
          $ref: "#/components/responses/internal_server_error"
          
      security:
        - bearerAuth: [] 
      
# --------------------------------------------------------------

components:
  parameters:
  
    identifier:
      name: id
      in: path
      description: It's a user's unique id
      required: true
      schema:
        description: String between 3-16 characters
        type: string
        pattern: '^.*?$'
        example: Micheal0Jackson
        minLength: 3
        maxLength: 16
        readOnly: true
        
    banned_id:
      name: banned_id
      in: path
      description: A banned user identifier.
      required: true
      schema:
        $ref: "#/components/schemas/user_nickname/properties/nickname"
      example: "PerverseGuy"
    
    follower_id:
      name: follower_id
      in: path
      description: A follower's identifier.
      required: true
      schema: 
        $ref: "#/components/schemas/user_nickname/properties/nickname"
      example: "Pikachu1"
      
    photo_id:
      name: photo_id
      in: path
      description: A photo identifier
      required: true
      schema: 
        description: Int64 between 0-9999
        type: integer
        format: int64
        minimum: 0
        maximum: 9999
        example : 999
        readOnly: true
    
    comment_id:
      name: comment_id
      in: path
      description: A comment identifier
      required: true
      schema:
        $ref: "#/components/schemas/comment_identifier/properties/comment_id"
      example: 123
    
    like_id:
      name: like_id
      in: path
      description: A like unique identifier.
      required: true
      schema: 
        $ref: "#/components/schemas/user_nickname/properties/nickname"
      example: "Mami"
      
# --------------------------------------------------------------

  schemas:
    user_nickname:
      description: It's a user's nickname
      type: object
      properties:
        nickname:
          description: Any string between 3-16 characters
          type: string
          minLength: 3
          maxLength: 16
          pattern: '^.*?$'
          example: "Johnny"
      example:
        nickname: "JohnSun"
        
    full_user:
      description: Contains the *unique identifier and the nickname of a user
      type: object
      properties:
        user_id:
          $ref: "#/components/schemas/user_nickname/properties/nickname"
        nickname:
          $ref: "#/components/schemas/user_nickname/properties/nickname"
      example:
        user_id: "John64"
        nickname: "NeX"
    full_profile:
          description: Object containing all the profile info
          type: object
          properties:
          
            user_id:
              $ref: "#/components/schemas/user_nickname/properties/nickname"
              
            nickname:
              $ref: "#/components/schemas/user_nickname/properties/nickname"
              
            followers:
              description: Array of followers
              type: array
              minItems: 0
              maxItems: 99
              items:
                $ref: "#/components/schemas/full_user"
              example:
                - user_id: "giacomo"
                  nickname: "giaochimino2"
                - user_id: "giuliano"
                  nickname: "giulietto61"

            following:
              description: Array of followed users
              type: array
              minItems: 0
              maxItems: 99
              items:
                $ref: "#/components/schemas/full_user"
              example:
                - user_id: "mark"
                  nickname: "marketto"
            
            photos:
              description: Array of photos
              type: array
              minItems: 0
              maxItems: 10
              items:
                $ref: "#/components/schemas/photo_post"
              example:
                - comments:
                  - user_id: "sfera"
                    nickname: "noNo"
                    comment: "bella li"
                    comment_id: 104
                  - user_id: "tiziano"
                    nickname: "ferroZ68"
                    comment: "spaccaaa"
                    comment_id: 99
                - likes:
                  - user_id: "sfera"
                    nickname: "noNo"
                  - user_id: "tiziano"
                    nickname: "ferroZ68"
                  - user_id: "raffaello"
                    nickname: "raffaello99"
                    
                  date: 2022-11-22T13:10:14Z
                  photo_id: 7836
                  owner: "PulpFiction"
    
    users_list:
      description: List of users found
      type: object
      properties:
        users:
          description: Array of users with a similar/partial name from the searched one
          type: array
          minItems: 0
          maxItems: 10
          items:
            $ref: "#/components/schemas/full_user"
          example:
            - user_id: jonathan
              nickname: jojo1
            - user_id: joseph
              nickname: jojo2
            - user_id: jotaro
              nickname: jojo3
              
    comment_identifier:
      description: It's a comment id
      type: object
      properties:
        comment_id:
          description: Any number between 0-9999
          type: integer
          format: int64
          minimum: 0
          maximum: 9999
          readOnly: true
          example: 965
      example:
        comment_id: 965

    comment:
      description: A user's comment containing the text of the comment and the id of who commented
      type: object
      properties:
        user_id: 
          $ref: "#/components/schemas/user_nickname/properties/nickname"
        nickname: 
          $ref: "#/components/schemas/user_nickname/properties/nickname"
        comment:
          type: string
          minLength: 1
          maxLength: 30
          pattern: '^.*?$'
          example: Cool brother
          description: String value of the comment
        comment_id:
          $ref: "#/components/schemas/comment_identifier/properties/comment_id"
      example:
        user_id: "Kiddo123"
        nickname: "Bad_Kiddo"
        photo_id: 873
        comment: "WOW WHAT A SCENERY"    
        comment_id: 16
        
    image:
      description: Image content
      type: object
      properties:
        photo_data:
          description: "Raw data of the image/photo"
          type: string
          minLength: 0
          maxLength: 100
          format: binary
          example: "101010101"
      example: 
        photo_data: "011110100"
        
    photo_post:
      description: Contains the essential info of a photo
      type: object
      properties:
        comments:
          description: Array of comments of a photo
          type: array
          minItems: 0
          maxItems: 9999
          items:
            $ref: "#/components/schemas/comment"
          example:
            - comments:
              - user_id: "micheal"
                nickname: "jackson"
                photo_id: 999
                comment: "what a great singer!"
                comment_id: 12
        likes:
          description:  Array of users that liked a photo
          type: array
          minItems: 0
          maxItems: 9999
          items:
            $ref: "#/components/schemas/full_user"
          example: 
            -  user_id: "mamma"
               nickname: "mammina"
            -  user_id: "papa"
               nickname: "papino"
        date:
          description: Date and time of upload.
          type: string
          format: date-time
          example: 2019-02-21T17:32:28Z
          readOnly: true
        photo_id:
          $ref: "#/components/schemas/comment_identifier/properties/comment_id"
        owner:
          $ref: "#/components/schemas/user_nickname/properties/nickname"
      example: 
        comments:
          - user_id: "meme"
            nickname: "Erik"
            photo_id: 3821
            comment: "great photo!"
            comment_id: 99
        likes:
          - user_id: "maki"
            nickname: "Zenin"
        date: 2019-02-21T17:32:28Z
        photo_id: 3821
        owner: "Toji"
    
    photo_list:
      description: Represents a list of photos
      type: object
      properties:
        photos_list:
          description: List of photos
          type: array
          minItems: 0
          maxItems: 10
          items:
            $ref: "#/components/schemas/photo_post"
          example:
            - comments:
                - user_id: "douma"
                  nickname: "domo99"
                  photo_id: 8331
                  comment: "wow"
                  comment_id: 9
                - user_id: "rrenzi"
                  nickname: "raa9"
                  photo_id: 7331
                  comment: "impressive!"
                  comment_id: 36
            - likes:
              - user_id: "ania"
                nickname: "anya99"
              - user_id: "momo"
                nickname: "momo99"
              date: 2015-03-21T17:32:28Z
              photo_id: 8222
              owner: "Mare"
              
            - comments:
                - user_id: "swrqra"
                  nickname: "nomo"
                  photo_id: 7846
                  comment: "aya"
                  comment_id: 24
                - user_id: "tino"
                  nickname: "mero34"
                  photo_id: 7832
                  comment: "daje"
                  comment_id: 942
            - likes:
              - user_id: "rrenzi"
                nickname: "raa9"
              - user_id: "ania"
                nickname: "anya"
              date: 2022-01-22T13:10:14Z
              photo_id: 7823
              owner: "Nero9"
              
    user_login:
      description: Identifier sent by user during the login
      type: object
      properties:
        identifier:
          $ref: "#/components/schemas/user_nickname/properties/nickname"
    login_return:
      description: Identifier returned after the login
      type: object
      properties:
        identifier:
          $ref: "#/components/schemas/user_nickname/properties/nickname"
  responses:
    user_ok:
      description: User found successfully by the id/nick.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/users_list"
    profile_fetched:
      description: This response is associated to the 200 http status (The profile info is fetched)
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/full_profile"
            
    stream_ok:
      description: This response is associated to the 200 http status(Contains a list of photos from the users)
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/photo_list"
            
    photo_download:
      description: This response is associated to the 200 http status(Gets u the image file of the photo u downloaded)
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/image"
            
    photo_uploaded:
      description: This response is associated to the 201 http status(photo has been uploaded successfully.)
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/photo_post"
            
    comment_added:
      description: This response is associated to the 201 http status(Comment has been added successfully.)
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/comment_identifier"
            
    no_content:
      description: This response is associated to the 204 http status (There is no content to send for this request)
      
    partial_content:
      description: This response is associated to the 206 http status (The requested resource has partial info)
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/full_profile"
    bad_request:
      description: This response is associated to the 400 http status (The server cannot process the request due to something that is perceived to be a client error)
    unauthorized:
      description: This response is associated to the 401 http status (The client must authenticate itself to get the requested response)
    forbidden:
      description: This response is associated to the 403 http status (The client does not have access rights to the content)
    not_found:
      description: This response is associated to the 404 http status (The server cannot find the requested resource.)
    internal_server_error:
      description: This response is associated to the 500 http status (The server has encountered a situation it does not know how to handle.)

# --------------------------------------------------------------

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      